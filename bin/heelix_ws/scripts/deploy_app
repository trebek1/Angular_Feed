#!/bin/bash -e
#
# Builds and releases the latest version of the app on the current branch
# to a given deployment target (EC2 instance).
# 
# See http://12factor.net/build-release-run for more info.
#


# The Bamboo build server apparently ignores the "#!/bin/bash -e" directive,
# so we must set the "fail fast" flag this way.
set -e

# Set these variables to the desired Git branch/tags to use when
# checking out the repositories for this release bundle.
SYNTHOS_CORE_VERSION=develop
SYNTHOS_SVR_VERSION=develop
HEELIX_WS_VERSION=develop

#GIT_VERSION=`${GIT} describe --tags --always`


# Deal with input args
if [[ $# -ne 1 ]]; then
	echo
	echo "USAGE: $0 <EC2 host>"
	echo
	exit 1
fi
TARGET_EC2="ec2-user@${1}"

echo "'`whoami`' user is deploying web service to ${TARGET_EC2}."
echo "Git version is ${HEELIX_WS_VERSION}."

# When running on the Bamboo server, we need to explicitly add the path to the git binary.
export PATH=/opt/rh/devtoolset-2/root/usr/bin:$PATH
echo "PATH is ${PATH}"

WORKDIR="/tmp/synthos/build"
GIT=git
TAR=tar
SSH="ssh"
SCP="scp"

# Used for file names (e.g. "my_build_20140910-1142UTC.tgz"
FILE_TIMESTAMP=`date -u +"%Y%m%d-%H%M%Z"`
# ISO 8601 format used by the web service endpoint 'GET /api/system_info'
ISO8601_TIMESTAMP=`date -u +"%Y-%m-%dT%H:%M:%SZ"`

# Clean the build directory
rm -rf ${WORKDIR}
mkdir -p ${WORKDIR}

cd ${WORKDIR}
BUILD_ID="heelix_ws_${HEELIX_WS_VERSION}_${FILE_TIMESTAMP}"

# Clone a fresh copy of the needed components into the working directory.
GIT_REPOS="http://etakahashi:Password1@stash.synthostech.com/scm/pefa"
TMP_GOPATH=${WORKDIR}/${BUILD_ID}
SRC_ROOT=${TMP_GOPATH}/src/qbase/synthos
mkdir -p ${SRC_ROOT}
echo "Cloning git repos..."
${GIT} clone --quiet ${GIT_REPOS}/synthos_core.git -b  ${SYNTHOS_CORE_VERSION}  ${SRC_ROOT}/synthos_core
${GIT} clone --quiet ${GIT_REPOS}/synthos_svr.git -b   ${SYNTHOS_SVR_VERSION}   ${SRC_ROOT}/synthos_svr
${GIT} clone --quiet ${GIT_REPOS}/heelix_ws.git -b     ${HEELIX_WS_VERSION}     ${SRC_ROOT}/heelix_ws

# Remove files that are not needed for the build bundle
rm -rf ${SRC_ROOT}/synthos_core/.git
rm -rf ${SRC_ROOT}/synthos_svr/.git
rm -rf ${SRC_ROOT}/heelix_ws/.git


# Add a .go file that contains version info into the release bundle so that 
# the version can be reported via a web service call ('GET /api/system_info').
# -----------------------------------------------------------------------------
echo """
package main

//
// This file was auto-generated by the build script (scripts/deploy_app).
//

const GIT_VERSION = \"${HEELIX_WS_VERSION}\"

const BUILD_DATE = \"${ISO8601_TIMESTAMP}\"
""" > ${SRC_ROOT}/heelix_ws/version_info.go
# -----------------------------------------------------------------------------


TARGET_FILE="${BUILD_ID}.tgz"
${TAR} cvfz ${TARGET_FILE} ${BUILD_ID}

# This bit is currently needed because the private key originally used for the
# Bamboo worker had a passphrase associated with it, which is cached in 
# .ssh/agent.env.
SSH_AGENT_FILE=/home/bamboo/.ssh/agent.env
if [ -e ${SSH_AGENT_FILE} ]; then
	echo "Applying SSH agent file in ${SSH_AGENT_FILE}"
	. ${SSH_AGENT_FILE}
	ssh-add -l
fi


echo ""
echo "Build created: ${WORKDIR}/${TARGET_FILE}"
echo "Uploading build to ${TARGET_EC2}"
echo ""
${SSH} ${TARGET_EC2} "mkdir -p ~/builds"         # make sure the builds/ directory exists
${SCP} ${TARGET_FILE} "${TARGET_EC2}:~/builds"   # Copy the bundle to the remote EC2 server


#
# Dynamically generate a startup script, which will then get 
# remotely executed on the target EC2 instance.
# -----------------------------------------------------------------------------
echo """#!/bin/bash -e
#
# This script was auto-generated by scripts/deploy_app.
# It is run remotely on the target EC2 instance.
#

SERVICE_STATUS=\`curl -Is localhost:8081/api/health_check | head -n 1\`
if [[ \$SERVICE_STATUS == *\"200 OK\"* ]]; then
	echo \"Saving user account data...\"
	curl localhost:8081/api/save_user_data
	echo \"Saving global content buffer...\"
	curl localhost:8081/api/save_global_data
else
	echo \"WARN: Web service not responding, so cannot save application data\"
fi

echo \"Killing the app server...\"
supervisorctl stop heelix_ws

# Execute the profile so that any SYNTHOS_* configuration vars get assigned.
source ~/.bash_profile

mkdir -p ~/builds
cd ~/builds
tar xvfz ${TARGET_FILE}
cd ${BUILD_ID}
export PATH=\$PATH:/usr/local/go/bin
export GOPATH=\`pwd\`
cd \${GOPATH}/src/qbase/synthos/synthos_core
make
cd \${GOPATH}/src/qbase/synthos/synthos_svr
make
cd \${GOPATH}/src/qbase/synthos/heelix_ws
make

# Copy the app within the source tree into the ec2-user home directory.
rm -rf ~/heelix_ws
cp -R \${GOPATH}/src/qbase/synthos/heelix_ws ~/
cp \${GOPATH}/bin/heelix_ws ~/heelix_ws

echo \"Migrating database...\"
cd ~/heelix_ws
./heelix_ws -migrate

echo \"Restarting the app server...\"
supervisorctl start heelix_ws
""" > remote_setup.sh
# -----------------------------------------------------------------------------

#
# Now run the remote setup script we just generated on the target server
#
${SSH} ${TARGET_EC2} 'bash -es' < remote_setup.sh

echo ""
echo "DONE!"
echo ""
